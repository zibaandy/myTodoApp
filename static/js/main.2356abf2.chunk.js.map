{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/ClearCompleted.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoMoodel","store","title","completed","id","destroy","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","observable","action","todoStore","lastId","todos","todosA","push","TodoModel","forEach","todo","myid","console","log","remove","_this","autorun","filter","_this2","_this3","_this4","_loop","_i","i","length","TodoEntry","observer","state","value","handleKeyDown","event","keyCode","preventDefault","document","getElementById","placeholder","TodoStore","addTodo","setState","react_default","a","createElement","className","onChange","target","onKeyDown","type","Component","TodoItem","props","possibleConstructorReturn","getPrototypeOf","call","onToggle","toggle","destroyFunc","bind","assertThisInitialized","removeTodo","checked","onClick","TodoItems","map","components_TodoItem","ClearCompleted","clear","Clear","TodoFooter","active","complete","all","selectedAll","selectedActive","selectedComplete","All","Active","Complete","components_ClearCompleted","App","components_TodoEntry","components_TodoItems","components_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2356abf2.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\n\r\nexport default class TodoMoodel {\r\n  store;\r\n  // @observable\r\n  id;\r\n  @observable\r\n  title;\r\n  @observable\r\n  completed;\r\n  @observable\r\n  destroy;\r\n  constructor(store, title, completed, id, destroy) {\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.id = id;\r\n    this.store = store;\r\n    this.destroy = destroy;\r\n  }\r\n  @action\r\n  toggle() {\r\n    this.completed = !this.completed;\r\n  }\r\n\r\n \r\n}\r\n","import { action, observable, computed, autorun } from \"mobx\";\r\nimport TodoModel from \"./TodoModel\";\r\n\r\nclass TodoStore {\r\n  @observable\r\n  todos = [];\r\n  lastId = 0;\r\n\r\n  @observable\r\n  todosA = [];\r\n\r\n  @action\r\n  addTodo(title) {\r\n    this.todos = this.todosA;\r\n    // this.lastId=this.lastId+1\r\n    this.todos.push(new TodoModel(this, title, false, this.lastId++, false));\r\n\r\n  //  console.log(\"lastId: \" + this.lastId);\r\n    this.todosA = this.todos;\r\n    this.todosA.forEach(todo => {\r\n    //  console.log(\" id: \" + todo.id + \" => title: \" + todo.title);\r\n    });\r\n  }\r\n\r\n  @action\r\n  //روش اول\r\n  // for (let i = 0; i < this.todosA.length; i++) {\r\n  //   if (this.todosA[i].destroy === true) {\r\n\r\n  //     this.todosA.remove(this.todosA[i]);\r\n\r\n  //     this.todosA.forEach(todo => {\r\n  //       if (todo.id > i) {\r\n  //         console.log(todo.id)\r\n  //         todo.id = todo.id - 1;\r\n  //       } else if (todo.id < i) {\r\n\r\n  //         todo.id = todo.id;\r\n  //       }\r\n  //       this.lastId = this.lastId--;\r\n  //     });\r\n\r\n  //     i = i - 1;\r\n  //   }\r\n  //   else{\r\n\r\n  //   }\r\n  //   this.todos=this.todosA\r\n  // }\r\n\r\n  //  }\r\n\r\n  //روش دوم\r\n  removeTodo(myid) {\r\n    console.log(\"destroy id: \" + myid);\r\n    this.todosA.remove(this.todosA[myid]);\r\n    this.lastId = this.lastId - 1;\r\n    this.todosA.forEach(todo => {\r\n      if (todo.id > myid) {\r\n        todo.id = todo.id - 1;\r\n      } else if (todo.id < myid) {\r\n        todo.id = todo.id;\r\n      }\r\n    });\r\n\r\n    //  console.log(\"newlastId: \" + this.lastId);\r\n\r\n    this.todos = this.todosA;\r\n  }\r\n\r\n  @action\r\n  All() {\r\n    autorun(() => {\r\n      this.todos = this.todosA.filter(todo => todo.completed !== \"\");\r\n    });\r\n  }\r\n  @action\r\n  Active() {\r\n    autorun(() => {\r\n      this.todos = this.todosA.filter(todo => todo.completed === false);\r\n    });\r\n  }\r\n\r\n  @action\r\n  Complete() {\r\n    autorun(() => {\r\n      this.todos = this.todosA.filter(todo => todo.completed === true);\r\n    });\r\n  }\r\n\r\n  @action\r\n  Clear() {\r\n    for (let i = 0; i < this.todosA.length; i++) {\r\n      if (this.todosA[i].completed === true) {\r\n        this.todosA.remove(this.todosA[i]);\r\n        this.todosA.forEach(todo => {\r\n          if (todo.id > i) {\r\n            todo.id = todo.id - 1;\r\n          } else if (todo.id < i) {\r\n            todo.id = todo.id;\r\n          }\r\n        });\r\n        this.lastId--;\r\n        i--;\r\n      }\r\n    }\r\n\r\n    this.todos = this.todosA;\r\n  }\r\n\r\n  // @computed\r\n  // get numOfTodos() {\r\n  //   return this.todosA.length;\r\n  // }\r\n}\r\nconst todoStore = new TodoStore();\r\nexport default todoStore;\r\n","import React, { Component } from \"react\";\r\nimport TodoStore from '../stores/TodoStore';\r\nimport {observer} from 'mobx-react';\r\n@observer\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \" \"\r\n  };\r\n  handleKeyDown=event=>{\r\n    if(event.keyCode  !==13){\r\n      return;\r\n    }\r\n    event.preventDefault()\r\ndocument.getElementById('place').placeholder=\"what needs to be done?\" \r\n    TodoStore.addTodo(this.state.value)\r\n    this.setState({\r\n      value:''\r\n    })  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todo</h1>\r\n        <input id='place'\r\n        \r\n          onChange={event => this.setState({ value: event.target.value})}\r\n          onKeyDown={\r\n            event=>this.handleKeyDown(event)\r\n          }\r\n          value={this.state.value}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"what needs to be done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default TodoEntry\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n//import {observable} from 'mobx';\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n \r\n\r\n  onToggle = () => {\r\n    this.props.todo.toggle();\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.state = {\r\n    //   destroy:this.props.todo.destroy\r\n    // };\r\n    this.destroyFunc = this.destroyFunc.bind(this);\r\n  }\r\n  destroyFunc() {\r\n    //روش اول\r\n    // this.props.todo.destroy = true;\r\n    // console.log(this.props.todo.id)\r\n    // todoStore.removeTodo()\r\n   \r\n   \r\n   //روش دوم\r\n    todoStore.removeTodo(this.props.todo.id);\r\n    //console.log(this.props.todo.id)\r\n  }\r\n  render() {\r\n    const { todo } = this.props;\r\n\r\n    return (\r\n      <li className={todo.completed ? \"completed\" : \" \"}>\r\n        <div className=\"view\">\r\n          <input\r\n            onChange={this.onToggle}\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            value=\"on\"\r\n            checked={todo.completed}\r\n          />\r\n          <label>{todo.title}</label>\r\n\r\n          <button className=\"destroy\" onClick={this.destroyFunc} />\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n\r\n      {/* <input className='toggle-all' type='check-box'></input>\r\n      <label></label> */}\r\n\r\n        <ul className=\"todo-list\">\r\n          {todoStore.todos.map(todo => {\r\n            return <TodoItem todo={todo}   />;\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n@observer\r\nclass ClearCompleted extends Component {\r\n  constructor(props) {\r\n      super(props)\r\n    this.clear = this.clear.bind(this);\r\n  }\r\n  clear() {\r\n    todoStore.Clear();\r\n      }\r\n  render() {\r\n    if (todoStore.todosA.filter(todo => todo.completed === true).length>0) {\r\n      return (\r\n        <a onClick={this.clear} className=\"clear-completed\">\r\n          clear-completed\r\n        </a>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default ClearCompleted","import ClearCompleted from \"./ClearCompleted\";\r\nimport React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n@observer\r\nclass TodoFooter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.active = this.active.bind(this);\r\n    this.complete = this.complete.bind(this);\r\n    this.all = this.all.bind(this);\r\n   \r\n\r\n    this.state = {\r\n      \r\n      selectedAll: true,\r\n      selectedActive: false,\r\n      selectedComplete: false\r\n    };\r\n  }\r\n  all() {\r\n    this.setState({\r\n      selectedAll: true,\r\n      selectedActive: false,\r\n      selectedComplete: false\r\n    });\r\n    todoStore.All();\r\n  }\r\n  active() {\r\n    this.setState({\r\n      selectedAll: false,\r\n      selectedActive: true,\r\n      selectedComplete: false\r\n    });\r\n    todoStore.Active();\r\n  }\r\n  complete() {\r\n    this.setState({\r\n      selectedAll: false,\r\n      selectedActive: false,\r\n      selectedComplete: true\r\n    });\r\n    todoStore.Complete();\r\n  }\r\n \r\n\r\n  render() {\r\n    // {\r\n    //   console.log(\r\n    //     todoStore.todosA.filter(todo => todo.completed === true).length\r\n    //   );\r\n    // }\r\n    if (todoStore.todosA.length > 0) {\r\n      return (\r\n        <div className=\"footer\">\r\n          <button className=\"todo-count\">\r\n            <span>\r\n              {todoStore.todosA.filter(todo => todo.completed === false).length}\r\n            </span>\r\n            <strong> items left</strong>\r\n          </button>\r\n          <ul className=\"filters\">\r\n            <li onClick={this.all}>\r\n              <button>\r\n                <a className={this.state.selectedAll ? \"selected\" : \" \"}>\r\n                  {\" \"}\r\n                  All\r\n                </a>\r\n              </button>\r\n            </li>\r\n         \r\n            <li onClick={this.active}>\r\n              <button type=\"submit\">\r\n                <a className={this.state.selectedActive ? \"selected\" : \" \"}>\r\n                  {\" \"}\r\n                  Active\r\n                </a>\r\n              </button>\r\n            </li>\r\n           \r\n            <li onClick={this.complete}>\r\n              <button type=\"submit\">\r\n                <a className={this.state.selectedComplete ? \"selected\" : \" \"}>\r\n                  Completed\r\n                </a>\r\n              </button>\r\n            </li>\r\n         \r\n          </ul>\r\n          <ClearCompleted />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default TodoFooter;\r\n","import React, { Component } from \"react\";\n//  import \"./App.css\";\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItms from \"./components/TodoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\n\nimport { observer } from \"mobx-react\";\n\n@observer\nclass App extends Component {\n  \n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n        <TodoItms />\n        <TodoFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}